 breed [vendors vendor]
breed [platforms platform]
breed [persons person]

vendors-own[  vendorbase currentplatform product_feature_1 product_feature_2 product_feature_3 price SC_thresholdvendor Kv1 Kv2 Kv3 ]
persons-own[platformchoice app_choice kp1 kp2 w1 w2 w3 price_flexibility SC_thresholdpublic app_user ]
platforms-own[platformbase name numberofvendors Cc Cv Cm Reputation]
globals [v0 v1 interaction app-userratio]

;Cc - Cost to consumer
;Cv - cost to vendor adoption 
;Cm - Cost to vendor maintenance 
;kp1 - strength of direct network effects for people
;kp2 - strength of indirect network effects for people
;Kv1 - strength of positive direct network effects for vendors
;kv2 - strength of negative direct network effects for vendors
;kv3 - strength of indirect network effects
;C1 C2 C3 - maturity of the components offered by each platform
; w1 w2 w3 - significance for each of the features 1 2 and 3


To setup
clear-all
  set app-userratio 0.5
  set v0 [3 5 6 5]
  set v1 [5 3 4 5]
  set interaction [-1 0 1 1]
  create-platforms 2
  ask platform 0 [ set name "entrant"  set Cc 500 set Cv 4000 set Reputation 600]
  ask platform 1 [ set name "established" set Cc 800 set Cv 6000 set Reputation 100]
  create-vendors 5 [set currentplatform 1 set product_feature_1 random-normal 0.4 0.2 set product_feature_2 random-normal 0.5 0.2 set product_feature_3 random-normal 0.7 0.2 set price random-normal 150 30]
  create-vendors 3 [set currentplatform 0 set product_feature_1 random-normal 0.6 0.2 set product_feature_2 random-normal 0.7 0.2 set product_feature_3 random-normal 0.7 0.1 set price random-normal 150 30]

  create-persons 9900[set platformchoice 1 set app_choice 0 set kp1 random-normal 0.03 0.01 set kp2 random-normal 0.7 0.002  set w1 0.4 set w2 0.5 set w3 0.6 set price_flexibility 1.4 set SC_thresholdpublic 1.7 set app_user random-normal app-userratio 0.1]
  create-persons 100[set platformchoice 0 set app_choice 0 set kp1 random-normal 0.03 0.01 set kp2 random-normal 0.7 0.002  set w1 0.4 set w2 0.5 set w3 0.6 set price_flexibility 1.4 set SC_thresholdpublic 1.7 set app_user random-normal app-userratio 0.1]

  ask persons[
    if(app_user > 0.5)[
      let currentplatformofperson platformchoice
      let vendors-choice-array [0]
      ask vendors [
        if (currentplatform = currentplatformofperson)[ set vendors-choice-array fput who vendors-choice-array ]
      ]
      set app_choice item (random  (length vendors-choice-array - 1 ))  vendors-choice-array

      
      ]
  ]
  
 
  reset-ticks
end

To generate-user [x]

create-persons x[ set platformchoice chooseplatform  set kp1 random-normal 0.03 0.01 set kp2 random-normal 0.7 0.002  set w1 0.4 set w2 0.5 set w3 0.6 set price_flexibility 1.4 set SC_thresholdpublic 1.7 set app_user random-normal app-userratio 0.1 set app_choice (chooseapp who platformchoice app_user)]

end 


To simulate
;; Counting of users for platform and vendors
  ask platforms [
    let platfrombasecounter 0
    let numberofvendorscounter 0
    let platformnumber who

    ask persons [
      if(platformchoice = platformnumber ) [set platfrombasecounter (platfrombasecounter + 1 )]
    ]
    set platformbase platfrombasecounter
    ask vendors [
      if(currentplatform = platformnumber ) [set numberofvendorscounter (numberofvendorscounter + 1 )]
    ]
    set numberofvendors numberofvendorscounter
    ifelse(who = 0 )[set v0 replace-item 0  v0 numberofvendors ][ set v1 replace-item  0  v1 numberofvendors ]
  ]

  ask vendors [
  let vendorbasecounter 0
    ifelse(currentplatform = 0)[set xcor random-normal 5 2 set ycor random-normal 0 4 set color red][set xcor random-normal -5 2 set ycor random-normal 0 4 set color blue]
    let vendornumber who

    ask persons [
      if(app_choice = vendornumber ) [set vendorbasecounter (vendorbasecounter + 1 )]
    ]

    set vendorbase vendorbasecounter

  ]
  ;ask platforms [show name show platformbase show numberofvendors]
  

;; Decisions for change
 ask persons [
    let change platfromchangeforpeople  who platformchoice app_choice
    if(change > 0)[
      ifelse(platformchoice = 0)[set platformchoice 1][set platformchoice 0] 
      set app_choice chooseApp who platformchoice app_user 
 
      
    ]
    
    if(app_user > 0.5)[
      ifelse(app_choice = 0 )[set app_choice chooseApp who platformchoice app_user][
      set change 0
      set  change appchangeforpeople  who platformchoice app_choice
        if(change > 0)[set app_choice change ] ] 
    ]

  ]

  ask vendors [
    let change platfromchangeforvendor  who currentplatform
    if(change > 0)[
      ifelse(currentplatform = 0)[set currentplatform 1][set currentplatform 0]
    ]
  ]

  generate-user 5
  ask persons [set app_user random-normal app-userratio 0.2]
  set app-userratio (app-userratio + 0.002)  
  

tick
end

To-report platfromchangeforpeople[ personnumber currentplatformnumber currentapp ]
  ; Calculates the utility for given person using direct and indirect network effects and subsidy

  let currentutility 0
  let competitorutility 0
  let change 0
  ask platforms[
    ifelse( currentplatformnumber = who)
    [set  currentutility  ( 0.1 * platformbase + 100 * numberofvendors + Reputation - Cc )]
    [set  competitorutility  (0.1 *  platformbase + 100 * numberofvendors + Reputation - Cc )]
  ]

  ifelse(competitorutility < currentutility)
  [set change 0][ifelse((competitorutility / currentutility) < 0 )[set change 1][if((competitorutility / currentutility) > 1.4 )[set change 1]]]
  ;show change
  report change
end

To-report appchangeforpeople[ personnumber currentplatformnumber currentapp ]
  ; Calculates the utility for given person using direct and indirect network effects and subsidy

  let currentutility 0
  let competitorutility [0]
  let competitorarray [0]
  let positionmax 0
  let change 0
  ask vendors[
  
    if(currentplatform = currentplatformnumber )[
      ifelse(who = currentapp)[
        set currentutility vendorbase - price][set competitorutility fput (vendorbase  - price) competitorutility set competitorarray fput who competitorarray]
    ]

  ]
  let maxcomputility max competitorutility

  set  positionmax position maxcomputility competitorutility
 

  ifelse(maxcomputility < currentutility)
  [set change 0][set change item positionmax competitorarray]
 
  report change
end



To-report platfromchangeforvendor [ vendornumber currentplatformnumber  ]

  let currentutility 0
  let competitorutility 0
  let change 0
  ask platforms[
    let networkeffectstrength 0
    ifelse(who = 0)[set networkeffectstrength ( (item 0 interaction ) * (item 0 v0) + (item 1 interaction ) * (item 1 v0) + (item 2 interaction ) * (item 2 v0) +(item 3 interaction ) * (item 3 v0)  ) ][set networkeffectstrength ( (item 0 interaction ) * (item 0 v1) + (item 1 interaction ) * (item 1 v1) + (item 2 interaction ) * (item 2 v1) +(item 3 interaction ) * (item 3 v1)  )] 
    ifelse( currentplatformnumber = who)
    [set  currentutility  (0.1 * platformbase - 50 * networkeffectstrength - Cv )]
    [set  competitorutility  (0.1 * platformbase - 50 * networkeffectstrength - Cv )]
  ]
   
  ifelse(competitorutility < currentutility)
  [set change 0][ifelse(competitorutility / currentutility < 0)[set change 1][if(competitorutility / currentutility > 1.1)[set change 1]]]
  ;show change
  report change

end

To-report chooseApp [ personnumber currentplatformnumber app_usercurrent  ]
  ; Calculates the utility for given person using direct and indirect network effects and subsidy
   let change 0
  if (app_usercurrent > 0.5)[
  let competitorutility [0]
  let competitorarray [0]
  let positionmax 0
 
  ask vendors[
    if(currentplatform = currentplatformnumber)[
    set competitorutility fput (vendorbase  - price) competitorutility 
        
        set competitorarray fput who competitorarray 
      ]
  ]
   set competitorutility remove-item (length competitorutility - 1 ) competitorutility
   set  competitorarray remove-item (length competitorarray - 1) competitorarray
   
    
  let maxcomputility max competitorutility
  set  positionmax position maxcomputility competitorutility
  set change item positionmax competitorarray
  ]  
  report change

  
end

To-report chooseplatform
  ; Calculates the utility for given person using direct and indirect network effects and subsidy
 
  let utility0 0
  let utility1 0
  let change 0
  ask platforms[
    ifelse(  who = 0 )
    [set  utility0  ( platformbase + 50 * numberofvendors + Reputation - Cc )]
    [set  utility1  ( platformbase + 50 * numberofvendors + Reputation - Cc )]
  ]

  ifelse(utility0 < utility1)
  [set change 1][set change 0]
  ;show change
  report change

  
end

